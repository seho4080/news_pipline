version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: news-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-newsdb}
      POSTGRES_USER: ${POSTGRES_USER:-newsuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-newspass}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-newsuser} -d ${POSTGRES_DB:-newsdb}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - news-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: news-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - news-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: news-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "29092:29092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - news-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: news-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - news-network

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: news-backend
    environment:
      DEBUG: ${DEBUG:-False}
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgres://${POSTGRES_USER:-newsuser}:${POSTGRES_PASSWORD:-newspass}@postgres:5432/${POSTGRES_DB:-newsdb}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ELASTICSEARCH_HOST: elasticsearch:9200
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - media_data:/app/media
    networks:
      - news-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: news-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - news-network

  # Kafka Producer
  producer:
    build:
      context: .
      dockerfile: docker/producer.Dockerfile
    container_name: news-producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: news-raw
      DLQ_TOPIC: news-dlq
      RSS_FETCH_INTERVAL: ${RSS_FETCH_INTERVAL:-300}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - news-network

  # Kafka Consumer (news_preprocessor)
  consumer:
    build:
      context: .
      dockerfile: docker/consumer.Dockerfile
    container_name: news-consumer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_INPUT_TOPIC: news-raw
      KAFKA_OUTPUT_TOPIC: news-processed
      DLQ_TOPIC: news-dlq
      DATABASE_URL: postgres://${POSTGRES_USER:-newsuser}:${POSTGRES_PASSWORD:-newspass}@postgres:5432/${POSTGRES_DB:-newsdb}
      ELASTICSEARCH_HOST: elasticsearch:9200
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - news-network

  # React Frontend with Nginx
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: news-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - news-network

volumes:
  postgres_data:
  elasticsearch_data:
  redis_data:
  media_data:

networks:
  news-network:
    driver: bridge